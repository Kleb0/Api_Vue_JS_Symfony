<?php

// namespace App\Controller;

// use App\Entity\User;
// use App\Entity\Role;
// use Doctrine\ORM\EntityManagerInterface;
// use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
// use Symfony\Component\HttpFoundation\JsonResponse;
// use Symfony\Component\HttpFoundation\Request;
// use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
// use Symfony\Component\Routing\Annotation\Route;

// class UserController extends AbstractController
// {
//     #[Route('/users', name: 'create_user', methods: ['POST'])]
// public function createUser(
//     Request $request,
//     EntityManagerInterface $entityManager,
//     UserPasswordHasherInterface $passwordHasher
// ): JsonResponse {
//     $data = json_decode($request->getContent(), true);
//     dump($data);

//     if (!isset($data['email'], $data['password'], $data['adress'])) {
//         return new JsonResponse(['message' => 'Les champs email, mot de passe et adresse sont obligatoires.'], 400);
//     }

//     if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
//         return new JsonResponse(['message' => 'L\'adresse email est invalide.'], 400);
//     }

//     $existingUser = $entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);
//     if ($existingUser) {
//         return new JsonResponse(['message' => 'Cet email est déjà utilisé. Veuillez en choisir un autre.'], 400);
//     }

//     if (strlen($data['password']) < 6) {
//         return new JsonResponse(['message' => 'Le mot de passe doit contenir au moins 6 caractères.'], 400);
//     }

//         try {
//             $user = new User();

//             $userCount = $entityManager->getRepository(User::class)->count([]);
//             $customId = $userCount > 0 ? $userCount + 1 : 1;
//             $user->setCustomId($customId);
        
//             $user->setEmail($data['email']);
//             $user->setAdress($data['adress']);
//             $hashedPassword = $passwordHasher->hashPassword($user, $data['password']);
//             $user->setPassword($hashedPassword);

//             $roleName = strtoupper($data['role']); // Ex: "admin" devient "ADMIN"
//             $role = $entityManager->getRepository(Role::class)->findOneBy(['name' => $roleName]);
//             $user->addRole($role);

//             // Persist explicitement la relation ManyToMany
//             $entityManager->persist($user);
//             foreach ($user->getRoles() as $role) {
//                 $entityManager->persist($role);
//             }

    
//             $entityManager->persist($user);
//             $entityManager->flush();
        
//             return new JsonResponse(['message' => 'Utilisateur créé avec succès.'], 201);
//         } 
//         catch (\Exception $e)
//         {
//             return new JsonResponse([
//                 'message' => 'Une erreur interne est survenue : ' . $e->getMessage()
//             ], 500);
//         }
// }
// }
